<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>silverbamboo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bamboo-gan.github.io/"/>
  <updated>2017-10-07T07:26:24.113Z</updated>
  <id>https://bamboo-gan.github.io/</id>
  
  <author>
    <name>Bamboo Gan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>医道与医心：乱世医者端木蓉</title>
    <link href="https://bamboo-gan.github.io/2017/10/06/%E5%8C%BB%E9%81%93%E4%B8%8E%E5%8C%BB%E5%BF%83%EF%BC%9A%E4%B9%B1%E4%B8%96%E5%8C%BB%E8%80%85%E7%AB%AF%E6%9C%A8%E8%93%89/"/>
    <id>https://bamboo-gan.github.io/2017/10/06/医道与医心：乱世医者端木蓉/</id>
    <published>2017-10-05T17:00:21.000Z</published>
    <updated>2017-10-07T07:26:24.113Z</updated>
    
    <content type="html"><![CDATA[<p>昨日，玄机更新了秦时明月特别篇，或者说端木蓉特别篇–医者入世。与此前不同的是这是秦时十周年几年的产物，原创是来自民间，玄机此前举办了一次征文大赛，此次更新的特别篇就是参赛作品中最佳人气奖的《医者入世》。<br><a id="more"></a></p><!-- ![](http://ox5d07w4x.bkt.clouddn.com/%E7%AB%AF%E6%9C%A8%E8%93%89500-300.jpg) --><p>从标题也可以看出，这似乎是讲述镜湖医仙端木蓉，从一个未曾入世的医学实习生，到治病救人的医者，最终加入墨家，为救天下苍生的故事。事实上也差不多，只是这特别篇太短了，啥都没说清楚，基本上只是三个人的对话。总结起来就是，墨家巨子燕丹死皮赖脸的要拉拢蓉姑娘的师傅加入墨家，然而嘴遁之术欠佳，念端至死都不愿加入墨家，师傅逝世后，巨子继续嘴遁蓉姑娘，蓉姑娘似乎动摇了师傅的教诲。</p><hr><h2 id="碧波渡口"><a href="#碧波渡口" class="headerlink" title="碧波渡口"></a>碧波渡口</h2><blockquote><p>镜湖三百里，处处皆可入画。</p><p>一位约莫十五六岁的少女撑着小船，划开碧可见底的秀水，缓缓靠近渡口。碧水之中，莲花方露尖角，不闻香只见色，娇艳可爱。—-《医者入世·初稿》</p></blockquote><p>镜湖医庄，的确是一个很美的地方，但凡风景如画的地方一定有美人出没。</p><p>彼时，蓉姑娘尚且年方二八，背着药篓，采药归来，在医者之路上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨日，玄机更新了秦时明月特别篇，或者说端木蓉特别篇–医者入世。与此前不同的是这是秦时十周年几年的产物，原创是来自民间，玄机此前举办了一次征文大赛，此次更新的特别篇就是参赛作品中最佳人气奖的《医者入世》。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://bamboo-gan.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="秦时明月" scheme="https://bamboo-gan.github.io/tags/%E7%A7%A6%E6%97%B6%E6%98%8E%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>JS特效</title>
    <link href="https://bamboo-gan.github.io/2017/06/27/JS%E7%89%B9%E6%95%88/"/>
    <id>https://bamboo-gan.github.io/2017/06/27/JS特效/</id>
    <published>2017-06-27T01:41:35.000Z</published>
    <updated>2017-10-07T08:55:38.356Z</updated>
    
    <content type="html"><![CDATA[<!--excerpt--><blockquote><h4 id="slice-根据索引值和索引值截取字符串"><a href="#slice-根据索引值和索引值截取字符串" class="headerlink" title="slice()  根据索引值和索引值截取字符串"></a><strong>slice()  根据索引值和索引值截取字符串</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>)); <span class="comment">//从索引截取到最后</span></div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">//从索引截,包左不包右</span></div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>)); <span class="comment">//后几个</span></div><div class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">//空字符串</span></div></pre></td></tr></table></figure><blockquote><h4 id="substr-根据索引值和长度值截取字符串"><a href="#substr-根据索引值和长度值截取字符串" class="headerlink" title="substr() 根据索引值和长度值截取字符串"></a><strong>substr() 根据索引值和长度值截取字符串</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>)); <span class="comment">//从索引截取到最后</span></div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">2</span>, <span class="number">6</span>)); <span class="comment">//从索引截,长度个字符串</span></div><div class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-3</span>)); <span class="comment">//后几个</span></div></pre></td></tr></table></figure><blockquote><h4 id="substring-根据索引值和索引值截取字符串"><a href="#substring-根据索引值和索引值截取字符串" class="headerlink" title="substring() 根据索引值和索引值截取字符串"></a><strong>substring() 根据索引值和索引值截取字符串</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>)); <span class="comment">//从索引截取到最后</span></div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">//从索引截,包左不包右</span></div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-1</span>)); <span class="comment">//全部截取</span></div><div class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">//只能调换,同第二种</span></div></pre></td></tr></table></figure><h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><blockquote><h4 id="trim-去除前后空格"><a href="#trim-去除前后空格" class="headerlink" title="trim() 去除前后空格"></a><strong>trim() 去除前后空格</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">"   a   b   c   "</span>;</div><div class="line"><span class="built_in">console</span>.log(str1);</div><div class="line"><span class="built_in">console</span>.log(str1.trim());</div></pre></td></tr></table></figure><blockquote><h4 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace() 替换"></a><strong>replace() 替换</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str2 = <span class="string">"Today is fine day,today is fine day a!!!"</span></div><div class="line"><span class="built_in">console</span>.log(str2);</div><div class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/today/gi</span>, <span class="string">"tomorrow"</span>));<span class="comment">//g:全部替换，i：忽略大小写</span></div></pre></td></tr></table></figure><blockquote><h4 id="split-字符串变数组"><a href="#split-字符串变数组" class="headerlink" title="split() 字符串变数组"></a><strong>split() 字符串变数组</strong></h4></blockquote><ul><li><p><strong>无参，是把字符串作为一个元素添加进数组中</strong></p></li><li><p><strong>空字符串，分隔字符串中每一个字符，分别添加进入数组中</strong></p></li><li><p><strong>指定字符分隔数组：特殊符号将不会出现在数组的任意一个元素中</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str3 = <span class="string">"关羽|张飞|刘备"</span>;</div><div class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">''</span>));<span class="comment">//(8) ["关", "羽", "|", "张", "飞", "|", "刘", "备"]</span></div><div class="line"><span class="built_in">console</span>.log(str3.split());<span class="comment">//["关羽|张飞|刘备"]</span></div><div class="line"><span class="built_in">console</span>.log(str3);<span class="comment">//关羽|张飞|刘备</span></div><div class="line"><span class="built_in">console</span>.log(str3.split(<span class="string">"|"</span>));<span class="comment">//(3) ["关羽", "张飞", "刘备"]</span></div></pre></td></tr></table></figure><h3 id="转换大小写-amp-其他操作"><a href="#转换大小写-amp-其他操作" class="headerlink" title="转换大小写&amp;其他操作"></a>转换大小写&amp;其他操作</h3><blockquote><h4 id="toLowerCase-amp-toUpperCase"><a href="#toLowerCase-amp-toUpperCase" class="headerlink" title="toLowerCase() &amp; toUpperCase()"></a><strong>toLowerCase() &amp; toUpperCase()</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"abcdEFG"</span>;</div><div class="line"></div><div class="line"><span class="comment">//转换成小写</span></div><div class="line"><span class="built_in">console</span>.log(str.toLowerCase());</div><div class="line"><span class="comment">//转换成大写</span></div><div class="line"><span class="built_in">console</span>.log(str.toUpperCase());</div></pre></td></tr></table></figure><blockquote><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><strong>其他操作</strong></h4></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"你好"</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str.anchor()) <span class="comment">//&lt;a name="undefined"&gt;你好&lt;/a&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.big()) <span class="comment">//&lt;big&gt;你好&lt;/big&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.sub()) <span class="comment">//&lt;sub&gt;你好&lt;/sub&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.sup()) <span class="comment">//&lt;sup&gt;你好&lt;/sup&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.link(<span class="string">"http://www.baidu.com"</span>)); <span class="comment">//&lt;a href="http://www.baidu.com"&gt;你好&lt;/a&gt;</span></div><div class="line"><span class="built_in">console</span>.log(str.bold()) <span class="comment">//&lt;b&gt;你好&lt;/b&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;String内置对象&quot;&gt;&lt;a href=&quot;#String内置对象&quot; class=&quot;headerlink&quot; title=&quot;String内置对象&quot;&gt;&lt;/a&gt;String内置对象&lt;/h2&gt;&lt;h3 id=&quot;字符串连接和截取&quot;&gt;&lt;a href=&quot;#字符串连接和截取&quot; class=&quot;headerlink&quot; title=&quot;字符串连接和截取&quot;&gt;&lt;/a&gt;字符串连接和截取&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;concat-连接两个字符串，返回新的字符串&quot;&gt;&lt;a href=&quot;#concat-连接两个字符串，返回新的字符串&quot; class=&quot;headerlink&quot; title=&quot;concat 连接两个字符串，返回新的字符串&quot;&gt;&lt;/a&gt;&lt;strong&gt;concat 连接两个字符串，返回新的字符串&lt;/strong&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str1 = &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str2 = &lt;span class=&quot;string&quot;&gt;&quot;123&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str3 = str1.concat(str2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str3);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端学习" scheme="https://bamboo-gan.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javscript" scheme="https://bamboo-gan.github.io/tags/javscript/"/>
    
  </entry>
  
  <entry>
    <title>Jquery的ajax方法学习</title>
    <link href="https://bamboo-gan.github.io/2017/06/24/Jquery%E7%9A%84ajax%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://bamboo-gan.github.io/2017/06/24/Jquery的ajax方法学习/</id>
    <published>2017-06-23T21:21:18.000Z</published>
    <updated>2017-10-01T15:55:31.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jquery的ajax方法"><a href="#Jquery的ajax方法" class="headerlink" title="Jquery的ajax方法"></a>Jquery的ajax方法</h1><h2 id="Jquery里面的get方法"><a href="#Jquery里面的get方法" class="headerlink" title="Jquery里面的get方法"></a>Jquery里面的get方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'01.jq_get.php'</span>,&#123;<span class="attr">name</span>:<span class="string">"jack"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                <span class="comment">// 直接打印结果</span></div><div class="line">                <span class="built_in">console</span>.log(data);</div><div class="line">                <span class="comment">// 打印属性值</span></div><div class="line">                <span class="built_in">console</span>.log(data.name);</div><div class="line">                <span class="built_in">console</span>.log(data.color);</div><div class="line">            &#125;,<span class="string">'json'</span>);</div></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><ul><li>参数1：url</li><li>参数2：发送的数据，支持直接写js对象，字面量对象，可选参数</li><li>参数3：回调函数</li><li>参数4：从服务端获取的数据类型，可选参数，如果写为json，jq内部会帮我们进行一个JSON.parse()的转化，不写的话，需要手动转化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">'jqGet.php'</span>,&#123;<span class="attr">name</span>:<span class="string">"jack"</span>,<span class="attr">age</span>:<span class="number">90</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(data);</div><div class="line">           data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">           <span class="built_in">console</span>.log(data.name);</div><div class="line">           <span class="built_in">console</span>.log(data.color);</div><div class="line">       &#125;)</div></pre></td></tr></table></figure><hr><h2 id="Jquery里面的POST方法"><a href="#Jquery里面的POST方法" class="headerlink" title="Jquery里面的POST方法"></a>Jquery里面的POST方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 跟$.get用法及其类似</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">参数1:url</span></div><div class="line"><span class="comment">参数2:发送的数据 支持 直接写js对象的方式</span></div><div class="line"><span class="comment">参数3:回调函数</span></div><div class="line"><span class="comment">参数4:从服务端获取的 数据类型 可以不写,如果写为json jq内部 会帮我们进行一个 JSON.parse()的转化 </span></div><div class="line"><span class="comment">*/</span></div><div class="line">$.post(<span class="string">'02.jq_post.php'</span>,&#123;<span class="attr">name</span>:<span class="string">"榴莲炒饭"</span>,<span class="attr">skill</span>:<span class="string">"熏人"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(data);</div><div class="line">&#125;,<span class="string">'json'</span>)</div></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//关于php中字符窜的拼接，都是发送的数据，返回</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'&#123;"name":"'</span>.$_POST[<span class="string">'name'</span>].<span class="string">'","skill":"'</span>.$_POST[<span class="string">'skill'</span>].<span class="string">'"&#125;'</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><hr><h2 id="Jquery里面的ajax方法"><a href="#Jquery里面的ajax方法" class="headerlink" title="Jquery里面的ajax方法"></a>Jquery里面的ajax方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用jq 发送ajax</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">常见参数:</span></div><div class="line"><span class="comment">url:请求的地址</span></div><div class="line"><span class="comment">success:请求成功的回调函数</span></div><div class="line"><span class="comment">type:不写是get 可以指定 get,post</span></div><div class="line"><span class="comment">dataType:数据的类型</span></div><div class="line"><span class="comment">data:发数据 可以写js对象</span></div><div class="line"><span class="comment">beforeSend:发送之前调用的匿名函数</span></div><div class="line"><span class="comment">可以return false 阻止该次请求</span></div><div class="line"><span class="comment">验证用户的数据 是否填了</span></div><div class="line"><span class="comment">error:请求失败以后 会调用</span></div><div class="line"><span class="comment">*/</span></div><div class="line">$.ajax(&#123;</div><div class="line">url:<span class="string">'03.jq_ajax123123123.php'</span>,</div><div class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(data);</div><div class="line">&#125;,</div><div class="line">type:<span class="string">'post'</span>,</div><div class="line">dataType:<span class="string">'json'</span>,</div><div class="line">data:&#123;<span class="string">"name"</span>:<span class="string">"干锅花菜"</span>,<span class="string">"skill"</span>:<span class="string">"上天"</span>&#125;,</div><div class="line">beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'发送之前调用'</span>);</div><div class="line"><span class="comment">// return false;</span></div><div class="line">&#125;,</div><div class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'请求失败了'</span>);</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Jquery的ajax方法&quot;&gt;&lt;a href=&quot;#Jquery的ajax方法&quot; class=&quot;headerlink&quot; title=&quot;Jquery的ajax方法&quot;&gt;&lt;/a&gt;Jquery的ajax方法&lt;/h1&gt;&lt;h2 id=&quot;Jquery里面的get方法&quot;&gt;&lt;a href=&quot;#Jquery里面的get方法&quot; class=&quot;headerlink&quot; title=&quot;Jquery里面的get方法&quot;&gt;&lt;/a&gt;Jquery里面的get方法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$.get(&lt;span class=&quot;string&quot;&gt;&#39;01.jq_get.php&#39;&lt;/span&gt;,&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;jack&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&amp;#125;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 直接打印结果&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 打印属性值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data.color);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;,&lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="前端学习" scheme="https://bamboo-gan.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javaScript" scheme="https://bamboo-gan.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>关于自增（自减）运算的一点问题</title>
    <link href="https://bamboo-gan.github.io/2017/06/05/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%A2%9E%EF%BC%88%E8%87%AA%E5%87%8F%EF%BC%89%E8%BF%90%E7%AE%97%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://bamboo-gan.github.io/2017/06/05/关于自增（自减）运算的一点问题/</id>
    <published>2017-06-05T07:22:35.000Z</published>
    <updated>2017-10-05T17:03:12.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h2><p>先来看一段代码 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = ++a + ++a;</div><div class="line">console.log(a); // 3</div><div class="line">console.log(b); //5</div></pre></td></tr></table></figure><blockquote><p>分析：这里a的计算过程很简单，第一个a是前置自增，所以一开始参与运算就自己变成2，后面一个a也是一样，但是第二个a的值自增之前已经是2了，所以自增之后就是3，那么赋值给b就是2+3=5了；而a的最终值是最后一次自增后的3.</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = a++ + ++a;</div><div class="line">console.log(a) // 3</div><div class="line">console.log(b); //4</div><div class="line">//b=  1 + (2+1) </div><div class="line">//a = 1 + 2</div></pre></td></tr></table></figure><blockquote><p>分析：这里的第一个a由于是后置自增，按照运算的优先级来说是先进行计算的，第二优先级是前置自增，然后是+,最后才是赋值，但是有个问题：后置自增运算遵循的是递增操作是在整个语句求值之后执行的。那么，首先需要弄清出这里所说的整个语句求值之后具体是指哪个或者哪部分或者是赋值之前的后面所有语句？且按下不表.我们先看这段代码，这么分析，第一个a的值是先不进行自增计算的，也就是+号之前的a = 1，越过+号之后第二个前置自增的a，在没有进行自增之前到底是几？1 or 2？正确应该是2，第一个a在之前没有进行自增运算，但是到了第二个a这里的时候，第一个a遗留的自增运算已经结束，变成2了，那么在此基础上a进行最后一次自增就变成3，即a = 3. b的计算过程是b = 1 + 3 = 4. 这里我们不妨，做一下变换假如第二个a也是后置自增运算呢？那么第二个a参与加法运算的时候就是2，b的值就是 1 + 2 = 3了，而a的值会在加法结束之后自增变成3。</p></blockquote><p>注：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external">MDN上关于运算的优先级</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = a++ + a++;</div><div class="line">console.log(a) //3</div><div class="line">console.log(b); //3</div><div class="line">//b = 1 + 2 =3</div><div class="line">//a = 1 + 1 + 1 == &gt; 3</div></pre></td></tr></table></figure><blockquote><p>分析：见上一条分析最后。这里有其他的观点指出后置自增运算可以看作是最后才进行自增运算的，像本例子两个完全一样的a后置自增，认为是1+1之后最后一个a再自增两次变成3的。然而实际并非如此。这里的a的自增运算并非最后一举自增两次形成，而是依次执行的，因而可以说上例说的整个执行语句指的就是，下一个运算符（+）之前的语句。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = ++a + a++;</div><div class="line">console.log(a) //3 1+1+1</div><div class="line">console.log(b); //4</div></pre></td></tr></table></figure><blockquote><p>分析：第一个前置自增a先自增运算后a = 2，下一个a，能参与加法运算的也就是当前的2，所以b赋值是 2+2 =4.而a由于最后一次自增是后置，所以是前面运算完毕之后，在2的基础上自增1，a=3. </p></blockquote><h2 id="验证的时刻-能够鉴别之前想法是否正确"><a href="#验证的时刻-能够鉴别之前想法是否正确" class="headerlink" title="验证的时刻 (能够鉴别之前想法是否正确)"></a>验证的时刻 (能够鉴别之前想法是否正确)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = 2;</div><div class="line">a++;</div><div class="line">var num = ++a + a++ + a + ++b + b++;</div><div class="line">//          3   3     4     3   3</div><div class="line">console.log(num); // 16</div><div class="line">console.log(a); //4</div><div class="line">console.log(b); //4</div></pre></td></tr></table></figure><blockquote><p>分析：声明a变量赋值为1，紧接着a就有一个后置自增运算，幸运的是a没有参与到其他运算中，所以分号之后的a就变成2了。num中第一个前置自增a的值立马变成3，第一个加号之后的a由于是后置自增，在当前运算语句中是不能先自增的所以，此时的a值是前一个a的值即3，那么到第三个a出现的时候，第二个a的自增运算已经完成了，所以此时的a=4，同理可得b的第一个值是3，第二个b当前参与加法运算的值是3，但是运算完之后就自增变成4了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var i = 1;</div><div class="line">var j = 1;</div><div class="line">var a = i++ + i++ + i++ + i++ + i++ + i++ + i++; // 7个</div><div class="line">//      1 + 2 + 3 + 4 + 5 + 6 + 7</div><div class="line">var b = ++j + ++j + ++j + ++j + ++j + ++j + ++j;</div><div class="line">console.log(a); //28</div><div class="line">console.log(i) //8</div><div class="line">console.log(b); // 2+3+4+5+6+7+8 =35</div><div class="line">console.log(j) // 8</div></pre></td></tr></table></figure><blockquote><p>再来更多一些，由于b的运算比较简单，不再赘述。看看a和i的变化，a总共有i的7次后置自增运算相加，第一个i后置自增，当前是1参与加法运算，后置可以理解为滞后一次自增，即当前参与运算不自增，第二个i累加了上一次i没有进行的自增，变成2，依次类推，a的运算过程是1+2+3+4+5+6+7=28，最后一个i是7，这是参与加法运算的i的值，还有一次后置自增，所以i的值最终结果是8.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var i = 1;</div><div class="line">var b = i++ + ++i * i++ + i--;</div><div class="line">//var b = i++ + ++i * (i++ + i--);</div><div class="line">//        1       3 * 3     4</div><div class="line">//        1       3 * (3 + 4) </div><div class="line">// i = 3, b = 14</div><div class="line">// i = 3, b = 22</div><div class="line">console.log(i);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure><blockquote><p>再来看一点好玩的，按照运算的优先级，i++(i–) &gt; ++i &gt; <em> &gt; + ,虽然有优先运算规则，但是i的运算过程是自左向右的，i的值是时刻变化的，后置自增遵循滞后一次自增，不难得出b运算中的第一个i是1，那为什么第二个变成了3呢？第二个i前置自增之前就已经是2了，自己再自增一次就变成3了，</em> 后面同样是后置自增，参与运算的自然是前一个i的值3，最后一个i需要先承接上一个i后置自增的后果变成4，等整个加法运算结束之后本身自减1，变成3，所以b的运算过程是1+3 <em> 3+4，i=3.我们可以验证一下i的变化或者自身运算是不是自左向右的，提升最后一个加法的优先级括起来，按照之前的思路分析，得出b的运算过程是1+3</em>(3+4)=22,可以打印一下验证是正确的。</p></blockquote><h5 id="总结：1-后置自增运算是滞后一次自增，当前参与的运算不自增；"><a href="#总结：1-后置自增运算是滞后一次自增，当前参与的运算不自增；" class="headerlink" title="总结：1.后置自增运算是滞后一次自增，当前参与的运算不自增；"></a>总结：1.后置自增运算是滞后一次自增，当前参与的运算不自增；</h5><h5 id="2-同一变量的自增运算过程是自左向右的。"><a href="#2-同一变量的自增运算过程是自左向右的。" class="headerlink" title="2.同一变量的自增运算过程是自左向右的。"></a>2.同一变量的自增运算过程是自左向右的。</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题的引出&quot;&gt;&lt;a href=&quot;#问题的引出&quot; class=&quot;headerlink&quot; title=&quot;问题的引出&quot;&gt;&lt;/a&gt;问题的引出&lt;/h2&gt;&lt;p&gt;先来看一段代码 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var a = 1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var b = ++a + ++a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(a); // 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(b); //5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：这里a的计算过程很简单，第一个a是前置自增，所以一开始参与运算就自己变成2，后面一个a也是一样，但是第二个a的值自增之前已经是2了，所以自增之后就是3，那么赋值给b就是2+3=5了；而a的最终值是最后一次自增后的3.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端学习" scheme="https://bamboo-gan.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="javascript" scheme="https://bamboo-gan.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
